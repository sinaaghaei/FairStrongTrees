# xlim(0, 11)+#limited-adult
# ylim(77, 81)+#limited-adult
theme(
# plot.title = element_text(size = 25),
plot.margin = margin(.5, .5, .5, .5, "cm"),
axis.text = element_text(size = 45),#30
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
fig_name = paste('FlowOCT_',data_name,'_depth_',t_depth, '_', metric, '.pdf', sep = '')
ggsave(paste(figure_path,fig_name,sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
}
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
data= read.csv('./../Results/Dec 29/FlowOCT/FlowOCT_limited-adult-2.csv', header=FALSE, sep=',', na.strings="", stringsAsFactors =TRUE)
data_name = 'limited-adult-2'
header= read.csv('./../header.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
names(data) <- names(header)
rm(header)
fontfam = "sans" #sans serif
figure_path = "./"
data$sample <- as.factor(data$sample)
data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
for(i in c('SP','PE','EOpp','EOdds')){#'SP','CSP','PE','EOpp','EOdds'
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = i
data = rbind(data,tmp_none)
}
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
data$data <- data_name
tmp <- data
tmp <- tmp %>%
group_by(approach,data,depth, fair.type, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc),mean(sp.train.data), mean(sp.train.pred),
mean(sp.test.data),mean(sp.test.pred),
mean(csp.train.data), mean(csp.train.pred),
mean(csp.test.data),mean(csp.test.pred),
mean(pe.train.pred),
mean(pe.test.pred),
mean(EOpp.train.pred),
mean(EOpp.test.pred),
mean(EOdds.train.pred),
mean(EOdds.test.pred))
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","train.acc",'test.acc',
"train.data.sp","train.pred.sp","test.data.sp","test.pred.sp",
"train.data.csp","train.pred.csp","test.data.csp","test.pred.csp",
"train.pred.pe","test.pred.pe",
"train.pred.EOpp","test.pred.EOpp",
"train.pred.EOdds","test.pred.EOdds")
for(m in c('SP','PE','EOpp','EOdds')){
metric = m
if(metric == 'SP'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.sp','train.pred.sp')]
x_title = ''#"Statistical Parity (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'SP Bound'
}else if(metric == 'CSP'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.csp','train.pred.csp')]
x_title = ''#"Conditional Statistical Parity (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'CSP Bound'
}else if(metric == 'PE'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.pe','train.pred.pe')]
x_title = ''#"Predictive Equality (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'PE Bound'
}else if(metric == 'EOpp'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.EOpp','train.pred.EOpp')]
x_title = ''#"Equal Opportunity (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'EOpp Bound'
}else if(metric == 'EOdds'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.EOdds','train.pred.EOdds')]
x_title = ''#"Equalized Odds (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'EOdds Bound'
}
names(tmp2) <- c("approach","data","depth","fair.type","fair.bound","test.acc","train.acc","test.pred.disc","train.pred.disc")
# tmp$fair.type <- factor(tmp$fair.type, levels = c('SP','CSP','PE','EOpp','EOdds'))
tmp2$fair.bound <- as.numeric(as.character(tmp2$fair.bound))
tmp2_1 <- tmp2[,c("approach","data","depth","fair.type","fair.bound","test.acc","test.pred.disc")]
tmp2_1$source <- 'out-of-sample'
names(tmp2_1) <- c("approach","data","depth","fair.type","fair.bound","acc","disc",'source')
tmp2_2 <- tmp2[,c("approach","data","depth","fair.type","fair.bound","train.acc","train.pred.disc")]
tmp2_2$source <- 'in-sample'
names(tmp2_2) <- c("approach","data","depth","fair.type","fair.bound","acc","disc",'source')
tmp2 <- rbind(tmp2_1,tmp2_2)
rm(tmp2_1,tmp2_2)
t_depth = 2
g1 <- ggplot(data = subset(tmp2,tmp2$depth == t_depth),aes(x=(disc)*100, y=acc*100)) +
geom_line(aes(linetype=source), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
labs(x=x_title, y = y_title, linetype = "Data", color =legend_title)+
# coord_flip(clip = "off") +
# xlim(0, 35)+#compas
# ylim(50, 70)+#compas
# xlim(0, 11)+#limited-adult
ylim(77, 81)+#limited-adult
theme(
# plot.title = element_text(size = 25),
plot.margin = margin(.5, .5, .5, .5, "cm"),
axis.text = element_text(size = 45),#30
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
fig_name = paste('FlowOCT_',data_name,'_depth_',t_depth, '_', metric, '.pdf', sep = '')
ggsave(paste(figure_path,fig_name,sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
}
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
data= read.csv('./../Results/Dec 29/FlowOCT/FlowOCT_limited-adult-2.csv', header=FALSE, sep=',', na.strings="", stringsAsFactors =TRUE)
data_name = 'limited-adult-2'
header= read.csv('./../header.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
names(data) <- names(header)
rm(header)
fontfam = "sans" #sans serif
figure_path = "./"
data$sample <- as.factor(data$sample)
data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
for(i in c('SP','PE','EOpp','EOdds')){#'SP','CSP','PE','EOpp','EOdds'
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = i
data = rbind(data,tmp_none)
}
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
data$data <- data_name
tmp <- data
tmp <- tmp %>%
group_by(approach,data,depth, fair.type, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc),mean(sp.train.data), mean(sp.train.pred),
mean(sp.test.data),mean(sp.test.pred),
mean(csp.train.data), mean(csp.train.pred),
mean(csp.test.data),mean(csp.test.pred),
mean(pe.train.pred),
mean(pe.test.pred),
mean(EOpp.train.pred),
mean(EOpp.test.pred),
mean(EOdds.train.pred),
mean(EOdds.test.pred))
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","train.acc",'test.acc',
"train.data.sp","train.pred.sp","test.data.sp","test.pred.sp",
"train.data.csp","train.pred.csp","test.data.csp","test.pred.csp",
"train.pred.pe","test.pred.pe",
"train.pred.EOpp","test.pred.EOpp",
"train.pred.EOdds","test.pred.EOdds")
for(m in c('SP','PE','EOpp','EOdds')){
metric = m
if(metric == 'SP'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.sp','train.pred.sp')]
x_title = ''#"Statistical Parity (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'SP Bound'
}else if(metric == 'CSP'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.csp','train.pred.csp')]
x_title = ''#"Conditional Statistical Parity (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'CSP Bound'
}else if(metric == 'PE'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.pe','train.pred.pe')]
x_title = ''#"Predictive Equality (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'PE Bound'
}else if(metric == 'EOpp'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.EOpp','train.pred.EOpp')]
x_title = ''#"Equal Opportunity (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'EOpp Bound'
}else if(metric == 'EOdds'){
tmp2 <- subset(tmp, tmp$fair.type == metric)
tmp2 <- tmp2[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.EOdds','train.pred.EOdds')]
x_title = ''#"Equalized Odds (%)"
y_title= ''#"Accuracy (%)"
legend_title = 'EOdds Bound'
}
names(tmp2) <- c("approach","data","depth","fair.type","fair.bound","test.acc","train.acc","test.pred.disc","train.pred.disc")
# tmp$fair.type <- factor(tmp$fair.type, levels = c('SP','CSP','PE','EOpp','EOdds'))
tmp2$fair.bound <- as.numeric(as.character(tmp2$fair.bound))
tmp2_1 <- tmp2[,c("approach","data","depth","fair.type","fair.bound","test.acc","test.pred.disc")]
tmp2_1$source <- 'out-of-sample'
names(tmp2_1) <- c("approach","data","depth","fair.type","fair.bound","acc","disc",'source')
tmp2_2 <- tmp2[,c("approach","data","depth","fair.type","fair.bound","train.acc","train.pred.disc")]
tmp2_2$source <- 'in-sample'
names(tmp2_2) <- c("approach","data","depth","fair.type","fair.bound","acc","disc",'source')
tmp2 <- rbind(tmp2_1,tmp2_2)
rm(tmp2_1,tmp2_2)
t_depth = 2
g1 <- ggplot(data = subset(tmp2,tmp2$depth == t_depth),aes(x=(disc)*100, y=acc*100)) +
geom_line(aes(linetype=source), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
labs(x=x_title, y = y_title, linetype = "Data", color =legend_title)+
# coord_flip(clip = "off") +
# xlim(0, 35)+#compas
# ylim(50, 70)+#compas
xlim(0, 11)+#limited-adult
ylim(77, 81)+#limited-adult
theme(
# plot.title = element_text(size = 25),
plot.margin = margin(.5, .5, .5, .5, "cm"),
axis.text = element_text(size = 45),#30
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
fig_name = paste('FlowOCT_',data_name,'_depth_',t_depth, '_', metric, '.pdf', sep = '')
ggsave(paste(figure_path,fig_name,sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
}
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
library(extrafont)
data= read.csv('./../Results/Dec 29/FlowOCT Kamiran_version/Kamiran_german-limited.csv', header=FALSE, sep=',', na.strings="", stringsAsFactors =TRUE)
data_name = 'german-limited'
header= read.csv('./../header_kamiran.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
names(data) <- names(header)
rm(header)
fontfam = "sans" #sans serif
figure_path = "./"
data$sample <- as.factor(data$sample)
# data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = 'SP'
data = rbind(data,tmp_none)
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
tmp <- data[,c("approach",'sample',"depth","fair.bound","train.acc",'test.acc',
"sp.train.pred","sp.test.pred")]
tmp <- tmp %>%
group_by(approach,depth, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc), mean(sp.train.pred),
mean(sp.test.pred))
names(tmp) <- c("approach","depth","fair.bound","train.acc",'test.acc',
"train.disc","test.disc")
tmp$fair.bound <- as.numeric(as.character(tmp$fair.bound))
tmp1 <- tmp[,c("approach","depth","fair.bound","test.acc","test.disc")]
tmp1$source <- 'out-of-sample'
names(tmp1) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp2 <- tmp[,c("approach","depth","fair.bound","train.acc","train.disc")]
tmp2$source <- 'in-sample'
names(tmp2) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp <- rbind(tmp1,tmp2)
rm(tmp1,tmp2)
data_flow <- tmp
data_flow$data <- NULL
rm(tmp,data)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
library(extrafont)
data= read.csv('./../Results/Dec 29/FlowOCT Kamiran_version/Kamiran_german.csv', header=FALSE, sep=',', na.strings="", stringsAsFactors =TRUE)
data_name = 'german'
header= read.csv('./../header_kamiran.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
names(data) <- names(header)
rm(header)
fontfam = "sans" #sans serif
figure_path = "./"
data$sample <- as.factor(data$sample)
# data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = 'SP'
data = rbind(data,tmp_none)
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
tmp <- data[,c("approach",'sample',"depth","fair.bound","train.acc",'test.acc',
"sp.train.pred","sp.test.pred")]
tmp <- tmp %>%
group_by(approach,depth, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc), mean(sp.train.pred),
mean(sp.test.pred))
names(tmp) <- c("approach","depth","fair.bound","train.acc",'test.acc',
"train.disc","test.disc")
tmp$fair.bound <- as.numeric(as.character(tmp$fair.bound))
tmp1 <- tmp[,c("approach","depth","fair.bound","test.acc","test.disc")]
tmp1$source <- 'out-of-sample'
names(tmp1) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp2 <- tmp[,c("approach","depth","fair.bound","train.acc","train.disc")]
tmp2$source <- 'in-sample'
names(tmp2) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp <- rbind(tmp1,tmp2)
rm(tmp1,tmp2)
data_flow <- tmp
data_flow$data <- NULL
rm(tmp,data)
data= read.csv('./../Results/Dec 29/FlowOCT Kamiran_version/Kamiran_german-limited.csv', header=FALSE, sep=',', na.strings="", stringsAsFactors =TRUE)
data_name = 'german'
header= read.csv('./../header_kamiran.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
names(data) <- names(header)
rm(header)
data$sample <- as.factor(data$sample)
# data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = 'SP'
data = rbind(data,tmp_none)
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
tmp <- data[,c("approach",'sample',"depth","fair.bound","train.acc",'test.acc',
"sp.train.pred","sp.test.pred")]
tmp <- tmp %>%
group_by(approach,depth, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc), mean(sp.train.pred),
mean(sp.test.pred))
names(tmp) <- c("approach","depth","fair.bound","train.acc",'test.acc',
"train.disc","test.disc")
tmp$fair.bound <- as.numeric(as.character(tmp$fair.bound))
tmp1 <- tmp[,c("approach","depth","fair.bound","test.acc","test.disc")]
tmp1$source <- 'out-of-sample'
names(tmp1) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp2 <- tmp[,c("approach","depth","fair.bound","train.acc","train.disc")]
tmp2$source <- 'in-sample'
names(tmp2) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp <- rbind(tmp1,tmp2)
rm(tmp1,tmp2)
data_flow_limited <- tmp
data_flow_limited$data <- NULL
data_flow_limited$approach <- "FlowOCT (limited)"
rm(tmp,data)
data= read.csv('./../Results/Kamiran/german.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data$depth <- data$depth + 1
data <- data %>%
group_by(depth, fair.bound) %>%
summarise(mean(acc_tr_pre),mean(disc_tr_pre),mean(acc_te_pre), mean(disc_te_pre),
mean(train.acc),mean(sp.train.pred),mean(test.acc),mean(sp.test.pred))
names(data) <- c("depth","fair.bound",'acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre','train.acc','sp.train.pred','test.acc','sp.test.pred')
data$approach <- 'DADT'
data_relab <- data[,c('approach','depth','fair.bound','train.acc','sp.train.pred','test.acc','sp.test.pred')]
# data_relab$approach <- 'Kamiran_relab'
data_relab_train <- data_relab[,c('approach','depth','fair.bound','train.acc','sp.train.pred')]
data_relab_train$source <- 'in-sample'
names(data_relab_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab_test <- data_relab[,c('approach','depth','fair.bound','test.acc','sp.test.pred')]
data_relab_test$source <- 'out-of-sample'
names(data_relab_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab <- rbind(data_relab_train, data_relab_test)
rm(data_relab_test, data_relab_train)
data_pre <- data[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre')]
data_pre_train <- data_pre[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre')]
data_pre_train$source <- 'in-sample'
names(data_pre_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre_test <- data_pre[,c('approach','depth','fair.bound','acc_te_pre','disc_te_pre')]
data_pre_test$source <- 'out-of-sample'
names(data_pre_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre <- rbind(data_pre_train, data_pre_test)
rm(data_pre_test, data_pre_train, data)
data_pre$fair.bound <- 1
data_pre <- unique(data_pre)
# data_kamiran <- rbind(data_pre, data_relab)
data_kamiran <- data_relab
rm(data_pre, data_relab)
data_kamiran$acc <- data_kamiran$acc/100
data <- rbind(data_flow, data_kamiran, data_flow_limited)
data <- subset(data, data$fair.bound %in% data_kamiran$fair.bound)
data$approach <- as.factor(data$approach)
data$approach<- factor(data$approach, levels = c("FlowOCT","FlowOCT (limited)","DADT"))
t_depth = 3
t_source = 'in-sample'
tmp <- subset(data,data$depth ==t_depth & data$source == t_source)
x_title = ""
y_title= ""
legend_title = 'SP Bound'
g1 <- ggplot(tmp,aes(x=((disc))*100, y=acc*100)) +
geom_line(aes(linetype=approach), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
scale_linetype_manual(values=c(1,3,2))+
labs(x=x_title, y = y_title, linetype = "Data", color =legend_title)+
# xlim(-7, 17)+
# ylim(50, 85)+
theme(
# plot.title = element_text(size = 25),
axis.text = element_text(size = 45),
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
fig_name = paste('1vs1_',data_name,'_depth_',t_depth,'_', t_source,'.pdf', sep = '')
ggsave(paste(figure_path,fig_name,sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
t_source = 'out-of-sample'
tmp <- subset(data,data$depth ==t_depth & data$source == t_source)
x_title = ""
y_title= ""
legend_title = 'SP Bound'
g1 <- ggplot(tmp,aes(x=((disc))*100, y=acc*100)) +
geom_line(aes(linetype=approach), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
scale_linetype_manual(values=c(1,3,2))+
labs(x=x_title, y = y_title, linetype = "Data", color =legend_title)+
# xlim(-7, 17)+
# ylim(50, 85)+
theme(
# plot.title = element_text(size = 25),
axis.text = element_text(size = 45),
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
fig_name = paste('1vs1_',data_name,'_depth_',t_depth,'_', t_source,'.pdf', sep = '')
ggsave(paste(figure_path,fig_name,sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
# if (forpres)
# {
#   ggsave(paste(figure_path,fig_name,sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
# } else {
#   ggsave(paste(figure_path,fig_name,sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
# }
