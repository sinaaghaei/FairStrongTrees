data = rbind(data,tmp_none)
}
data <- data[data$fair.type!= 'None',]
rm(tmp_none)
tmp <- data
tmp <- tmp %>%
group_by(approach,data,depth, fair.type, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc),mean(sp.train.data), mean(sp.train.pred),
mean(sp.test.data),mean(sp.test.pred),
mean(csp.train.data), mean(csp.train.pred),
mean(csp.test.data),mean(csp.test.pred),
mean(pe.train.data), mean(pe.train.pred),
mean(pe.test.data),mean(pe.test.pred),
mean(EOpp.train.data), mean(EOpp.train.pred),
mean(EOpp.test.data),mean(EOpp.test.pred))
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","train.acc",'test.acc',
"train.data.sp","train.pred.sp","test.data.sp","test.pred.sp",
"train.data.csp","train.pred.csp","test.data.csp","test.pred.csp",
"train.data.pe","train.pred.pe","test.data.pe","test.pred.pe",
"train.data.EOpp","train.pred.EOpp","test.data.EOpp","test.pred.EOpp")
# tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","train.acc",
#              'train.pred.sp','train.pred.csp','train.pred.pe','train.pred.EOpp')]
#
# tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'train.acc'))
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",
'test.pred.sp','test.pred.csp','test.pred.pe','test.pred.EOpp')]
tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'test.acc'))
tmp <- data
tmp <- tmp %>%
group_by(approach,data,depth, fair.type, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc),mean(sp.train.data), mean(sp.train.pred),
mean(sp.test.data),mean(sp.test.pred),
mean(csp.train.data), mean(csp.train.pred),
mean(csp.test.data),mean(csp.test.pred),
mean(pe.train.data), mean(pe.train.pred),
mean(pe.test.data),mean(pe.test.pred),
mean(EOpp.train.data), mean(EOpp.train.pred),
mean(EOpp.test.data),mean(EOpp.test.pred))
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","train.acc",'test.acc',
"train.data.sp","train.pred.sp","test.data.sp","test.pred.sp",
"train.data.csp","train.pred.csp","test.data.csp","test.pred.csp",
"train.data.pe","train.pred.pe","test.data.pe","test.pred.pe",
"train.data.EOpp","train.pred.EOpp","test.data.EOpp","test.pred.EOpp")
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","train.acc",
'train.pred.sp','train.pred.csp','train.pred.pe','train.pred.EOpp')]
tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'train.acc'))
# tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",
#              'test.pred.sp','test.pred.csp','test.pred.pe','test.pred.EOpp')]
#
# tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'test.acc'))
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
data= read.csv('./../Results/FairOCT_COMPAS_10800_May_5.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
for(i in c('SP','CSP','PE','EOpp','EOdds')){
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = i
data = rbind(data,tmp_none)
}
data <- data[data$fair.type!= 'None',]
rm(tmp_none)
tmp <- data
tmp <- tmp %>%
group_by(approach,data,depth, fair.type, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc),mean(sp.train.data), mean(sp.train.pred),
mean(sp.test.data),mean(sp.test.pred),
mean(csp.train.data), mean(csp.train.pred),
mean(csp.test.data),mean(csp.test.pred),
mean(pe.train.data), mean(pe.train.pred),
mean(pe.test.data),mean(pe.test.pred),
mean(EOpp.train.data), mean(EOpp.train.pred),
mean(EOpp.test.data),mean(EOpp.test.pred))
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","train.acc",'test.acc',
"train.data.sp","train.pred.sp","test.data.sp","test.pred.sp",
"train.data.csp","train.pred.csp","test.data.csp","test.pred.csp",
"train.data.pe","train.pred.pe","test.data.pe","test.pred.pe",
"train.data.EOpp","train.pred.EOpp","test.data.EOpp","test.pred.EOpp")
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","train.acc",
'train.pred.sp','train.pred.csp','train.pred.pe','train.pred.EOpp')]
tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'train.acc'))
# tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",
#              'test.pred.sp','test.pred.csp','test.pred.pe','test.pred.EOpp')]
#
# tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'test.acc'))
View(tmp)
15*13
840/195
15*14
840/210
g1 <- ggplot(data = subset(tmp,tmp$depth ==2), aes(x=(1-value)*100, y=test.acc*100)) +
geom_point()+#aes(size = fair.bound)
# geom_text(aes(label = fair.bound),
#           vjust = "inward", hjust = "inward",check_overlap = TRUE, nudge_y = 5,nudge_x = 4,
#           show.legend = FALSE,size = 3) +
geom_line(aes(color = variable)) +
facet_grid(vars(fair.type), vars(variable))+
labs(x="Fairness (%)", y = "Accuracy (%)", linetype = "Constraint")+
theme(
# plot.title = element_text(size = 25),
axis.title = element_text(size = 29)
)
print(g1)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
data= read.csv('./../Results/FairOCT_COMPAS_10800_May_5.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
for(i in c('SP','CSP','PE','EOpp','EOdds')){
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = i
data = rbind(data,tmp_none)
}
data <- data[data$fair.type!= 'None',]
rm(tmp_none)
tmp <- data
tmp <- tmp %>%
group_by(approach,data,depth, fair.type, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc),mean(sp.train.data), mean(sp.train.pred),
mean(sp.test.data),mean(sp.test.pred),
mean(csp.train.data), mean(csp.train.pred),
mean(csp.test.data),mean(csp.test.pred),
mean(pe.train.data), mean(pe.train.pred),
mean(pe.test.data),mean(pe.test.pred),
mean(EOpp.train.data), mean(EOpp.train.pred),
mean(EOpp.test.data),mean(EOpp.test.pred))
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","train.acc",'test.acc',
"train.data.sp","train.pred.sp","test.data.sp","test.pred.sp",
"train.data.csp","train.pred.csp","test.data.csp","test.pred.csp",
"train.data.pe","train.pred.pe","test.data.pe","test.pred.pe",
"train.data.EOpp","train.pred.EOpp","test.data.EOpp","test.pred.EOpp")
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","train.acc",
'train.pred.sp','train.pred.csp','train.pred.pe','train.pred.EOpp')]
tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'train.acc'))
# tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",
#              'test.pred.sp','test.pred.csp','test.pred.pe','test.pred.EOpp')]
#
# tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'test.acc'))
g1 <- ggplot(data = subset(tmp,tmp$depth ==2), aes(x=(1-value)*100, y=train.acc*100)) +
geom_point()+#aes(size = fair.bound)
# geom_text(aes(label = fair.bound),
#           vjust = "inward", hjust = "inward",check_overlap = TRUE, nudge_y = 5,nudge_x = 4,
#           show.legend = FALSE,size = 3) +
geom_line(aes(color = variable)) +
facet_grid(vars(fair.type), vars(variable))+
labs(x="Fairness (%)", y = "Accuracy (%)", linetype = "Constraint")+
theme(
# plot.title = element_text(size = 25),
axis.title = element_text(size = 29)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"grid_train.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
} else {
ggsave(paste(figure_path,"grid_train.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
}
View(tmp)
g1 <- ggplot(data = subset(tmp,tmp$depth ==2), aes(x=(1-value)*100, y=train.acc*100)) +
geom_point()+#aes(size = fair.bound)
geom_text(aes(label = fair.bound),
vjust = "inward", hjust = "inward",check_overlap = TRUE, nudge_y = 5,nudge_x = 4,
show.legend = FALSE,size = 3) +
geom_line(aes(color = variable)) +
facet_grid(vars(fair.type), vars(variable))+
labs(x="Fairness (%)", y = "Accuracy (%)", linetype = "Constraint")+
theme(
# plot.title = element_text(size = 25),
axis.title = element_text(size = 29)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"grid_train.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
} else {
ggsave(paste(figure_path,"grid_train.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
}
16*8/12
g1 <- ggplot(data = subset(tmp,tmp$depth ==2), aes(x=(1-value)*100, y=train.acc*100)) +
geom_point()+#aes(size = fair.bound)
geom_text(aes(label = fair.bound),
vjust = "inward", hjust = "inward",check_overlap = TRUE, nudge_y = 5,nudge_x = 4,
show.legend = FALSE,size = 3) +
geom_line(aes(color = variable)) +
facet_grid(vars(fair.type), vars(variable))+
labs(x="Fairness (%)", y = "Accuracy (%)", linetype = "Constraint")+
theme(
# plot.title = element_text(size = 25),
axis.title = element_text(size = 29)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"grid_train.pdf",sep = ""),device = "pdf", width = 16, height = 11, units =  "in")
} else {
ggsave(paste(figure_path,"grid_train.pdf",sep = ""),device = "pdf", width = 16, height = 11, units =  "in")
}
tmp <- data
tmp <- tmp %>%
group_by(approach,data,depth, fair.type, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc),mean(sp.train.data), mean(sp.train.pred),
mean(sp.test.data),mean(sp.test.pred),
mean(csp.train.data), mean(csp.train.pred),
mean(csp.test.data),mean(csp.test.pred),
mean(pe.train.data), mean(pe.train.pred),
mean(pe.test.data),mean(pe.test.pred),
mean(EOpp.train.data), mean(EOpp.train.pred),
mean(EOpp.test.data),mean(EOpp.test.pred))
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","train.acc",'test.acc',
"train.data.sp","train.pred.sp","test.data.sp","test.pred.sp",
"train.data.csp","train.pred.csp","test.data.csp","test.pred.csp",
"train.data.pe","train.pred.pe","test.data.pe","test.pred.pe",
"train.data.EOpp","train.pred.EOpp","test.data.EOpp","test.pred.EOpp")
# tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","train.acc",
#              'train.pred.sp','train.pred.csp','train.pred.pe','train.pred.EOpp')]
#
# tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'train.acc'))
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",
'test.pred.sp','test.pred.csp','test.pred.pe','test.pred.EOpp')]
tmp <- melt(tmp, id.vars=c("approach","data","depth","fair.type","fair.bound",'test.acc'))
g1 <- ggplot(data = subset(tmp,tmp$depth ==2), aes(x=(1-value)*100, y=test.acc*100)) +
geom_point()+#aes(size = fair.bound)
geom_text(aes(label = fair.bound),
vjust = "inward", hjust = "inward",check_overlap = TRUE, nudge_y = 5,nudge_x = 4,
show.legend = FALSE,size = 3) +
geom_line(aes(color = variable)) +
facet_grid(vars(fair.type), vars(variable))+
labs(x="Fairness (%)", y = "Accuracy (%)", linetype = "Constraint")+
theme(
# plot.title = element_text(size = 25),
axis.title = element_text(size = 29)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"grid_test.pdf",sep = ""),device = "pdf", width = 16, height = 11, units =  "in")
} else {
ggsave(paste(figure_path,"grid_test.pdf",sep = ""),device = "pdf", width = 16, height = 11, units =  "in")
}
View(tmp)
library(caret)
library(stringr)
library(outliers)
library(editrules)
library(dplyr)
rm(list=ls())
graphics.off()
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
data_1 <- read.csv("adult.data", header = FALSE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data_2 <- read.csv("adult.test", header = FALSE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data <- rbind(data_1,data_2)
rm(data_1,data_2)
names(data) <- c('age','workclass','fnlwgt','education','education_num','marital_status','occupation','relationship',
'race','sex','capital_gain','capital_loss','hours_per_week','native_country','target')
# Let's replace ? with NA and omit them from the dataset
data[data==' ?'] = NA
data <- na.omit(data)
##########################################################################################################
# tidy preprocess
##########################################################################################################
# Check relationship between education and education.num
data %>% distinct(education, education_num)
# drop education.num variable
data$education_num <- NULL
# Create capital variable which is the difference betwwen capital-gain and capital-loss
data <- data %>% mutate(capital = capital_gain - capital_loss)
# List down Factor Columns in dataframe & Trim string in factor columns
fac_cols <- sapply(data, is.factor)
data <- data.frame(cbind(sapply(data[,fac_cols], trimws, which="both"), data[,!fac_cols]))
# Clean “Workclass” variable by categorizing it into 4 categories: Gov, Self-emp, Private and Other
data <- data %>% mutate(workclass = ifelse(grepl(".gov$", str_trim(workclass)), "Gov",
ifelse(grepl("^Self.",str_trim(workclass)),"Self-emp",
ifelse(grepl("^Private$", str_trim(workclass)),"Private", "Other"))))
data$workclass <- as.factor(data$workclass)
levels(data$workclass)
# Clean “Education” variable by categorizing it into groups: Before-Highschool, Associate, Post-graduate, HS-grad, Some-college and Bachelors
data <- data %>% mutate(education = ifelse(grepl(".th$|^Preschool$", (education)), "Before-Highschool",
ifelse(grepl("^Assoc.", (education)),"Associate",
ifelse(grepl("^Masters$|^Doctorate$|^Pro.",(education)), "Post-Graduate",
as.character((education))))))
data$education <- as.factor(data$education)
levels(data$education)
# Clean “Marital Status” variable
data <- data %>% mutate(marital_status = ifelse(grepl("^Married.", marital_status), "Married", as.character(marital_status)))
data$marital_status <- as.factor(data$marital_status)
levels(data$marital_status)
#Clean “Income variable”
data <- data %>% mutate(target = ifelse(grepl("^<=50K.$", target), "<=50K",
ifelse(grepl("^>50K.$", target),">50K", as.character(target))))
data$target <- as.factor(data$target)
levels(data$target)
# Categorize Age into 4 groups : <=30, 30-45, 45-60 and >60
# Convert Age character into numeric because Age has character type as default in dataset.
data$age <- as.integer(data$age)
# Categorize Age into 4 groups
data<- data %>% mutate(age_group = ifelse(age <=30, "<=30",
ifelse(age>30 & age <=45, "30-45",
ifelse(age>45 & age <=60,"45-60",
">60"))))
data$age_group <- factor(data$age_group, levels = c('<=30','30-45','45-60','>60'))
# Check levels result of Age after processing
levels(data$age_group)
#Clean Native Countries variable by categorizing it into two groups : US and Non-US
data<- data %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Non-USA"))
data$native_country <- as.factor(data$native_country)
levels(data$native_country)
# The quantiles of hours.per.weak are not unique; Here we divide people into following categories
data<- data %>% mutate(hours_per_week = ifelse(hours_per_week <=20, "<=20",
ifelse(hours_per_week>20 & hours_per_week <=40, "20-40",
ifelse(hours_per_week>40 & hours_per_week <=60,"40-60",
">60"))))
data$hours_per_week <- factor(data$hours_per_week, levels = c('<=20','20-40','40-60','>60'))
# fnlwgt
x='fnlwgt'
data[[x]] = as.numeric(data[[x]])
data[[x]] = cut(data[[x]],
c(-Inf,quantile(data[[x]],0.25),quantile(data[[x]],0.5),quantile(data[[x]],0.75),Inf),
labels=c(1,2,3,4))
# #Capital
summary(data$capital)
nrow(subset(data,data$capital>0))/nrow(data)
nrow(subset(data,data$capital<0))/nrow(data)
nrow(subset(data,data$capital==0))/nrow(data)
data<- data %>% mutate(capital = ifelse(capital < 0 , "<0",
ifelse(capital>0 , ">0",
'=0')))
data$age <- NULL
data$capital_gain <- NULL
data$capital_loss <- NULL
rm(list=ls())
graphics.off()
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
data_1 <- read.csv("adult.data", header = FALSE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data_2 <- read.csv("adult.test", header = FALSE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
getwd()
rm(list=ls())
graphics.off()
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
data_1 <- read.csv("../Data Proprocess code/adult/adult.data", header = FALSE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data_2 <- read.csv("../Data Proprocess code/adult/adult.test", header = FALSE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data <- rbind(data_1,data_2)
rm(data_1,data_2)
names(data) <- c('age','workclass','fnlwgt','education','education_num','marital_status','occupation','relationship',
'race','sex','capital_gain','capital_loss','hours_per_week','native_country','target')
# Let's replace ? with NA and omit them from the dataset
data[data==' ?'] = NA
data <- na.omit(data)
# Check relationship between education and education.num
data %>% distinct(education, education_num)
# drop education.num variable
data$education_num <- NULL
# Create capital variable which is the difference betwwen capital-gain and capital-loss
data <- data %>% mutate(capital = capital_gain - capital_loss)
# List down Factor Columns in dataframe & Trim string in factor columns
fac_cols <- sapply(data, is.factor)
data <- data.frame(cbind(sapply(data[,fac_cols], trimws, which="both"), data[,!fac_cols]))
# Clean “Workclass” variable by categorizing it into 4 categories: Gov, Self-emp, Private and Other
data <- data %>% mutate(workclass = ifelse(grepl(".gov$", str_trim(workclass)), "Gov",
ifelse(grepl("^Self.",str_trim(workclass)),"Self-emp",
ifelse(grepl("^Private$", str_trim(workclass)),"Private", "Other"))))
data$workclass <- as.factor(data$workclass)
levels(data$workclass)
# Clean “Education” variable by categorizing it into groups: Before-Highschool, Associate, Post-graduate, HS-grad, Some-college and Bachelors
data <- data %>% mutate(education = ifelse(grepl(".th$|^Preschool$", (education)), "Before-Highschool",
ifelse(grepl("^Assoc.", (education)),"Associate",
ifelse(grepl("^Masters$|^Doctorate$|^Pro.",(education)), "Post-Graduate",
as.character((education))))))
data$education <- as.factor(data$education)
levels(data$education)
# Clean “Marital Status” variable
data <- data %>% mutate(marital_status = ifelse(grepl("^Married.", marital_status), "Married", as.character(marital_status)))
data$marital_status <- as.factor(data$marital_status)
levels(data$marital_status)
#Clean “Income variable”
data <- data %>% mutate(target = ifelse(grepl("^<=50K.$", target), "<=50K",
ifelse(grepl("^>50K.$", target),">50K", as.character(target))))
data$target <- as.factor(data$target)
levels(data$target)
# Categorize Age into 4 groups : <=30, 30-45, 45-60 and >60
# Convert Age character into numeric because Age has character type as default in dataset.
data$age <- as.integer(data$age)
# Categorize Age into 4 groups
data<- data %>% mutate(age_group = ifelse(age <=30, "<=30",
ifelse(age>30 & age <=45, "30-45",
ifelse(age>45 & age <=60,"45-60",
">60"))))
data$age_group <- factor(data$age_group, levels = c('<=30','30-45','45-60','>60'))
# Check levels result of Age after processing
levels(data$age_group)
#Clean Native Countries variable by categorizing it into two groups : US and Non-US
data<- data %>% mutate(native_country = ifelse(grepl("United.",native_country), "USA", "Non-USA"))
data$native_country <- as.factor(data$native_country)
levels(data$native_country)
# The quantiles of hours.per.weak are not unique; Here we divide people into following categories
data<- data %>% mutate(hours_per_week = ifelse(hours_per_week <=20, "<=20",
ifelse(hours_per_week>20 & hours_per_week <=40, "20-40",
ifelse(hours_per_week>40 & hours_per_week <=60,"40-60",
">60"))))
data$hours_per_week <- factor(data$hours_per_week, levels = c('<=20','20-40','40-60','>60'))
# fnlwgt
x='fnlwgt'
data[[x]] = as.numeric(data[[x]])
data[[x]] = cut(data[[x]],
c(-Inf,quantile(data[[x]],0.25),quantile(data[[x]],0.5),quantile(data[[x]],0.75),Inf),
labels=c(1,2,3,4))
# #Capital
summary(data$capital)
nrow(subset(data,data$capital>0))/nrow(data)
nrow(subset(data,data$capital<0))/nrow(data)
nrow(subset(data,data$capital==0))/nrow(data)
data<- data %>% mutate(capital = ifelse(capital < 0 , "<0",
ifelse(capital>0 , ">0",
'=0')))
data$age <- NULL
View(data)
