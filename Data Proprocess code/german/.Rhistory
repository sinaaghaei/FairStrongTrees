{
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
} else {
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
}
tmp <- subset(data,data$depth ==2 & data$source == 'out-of-sample') #in-sample out-of-sample
x_title = "Statistical Parity (%)"
y_title= "Accuracy (%)"
legend_title = 'SP Bound'
g1 <- ggplot(tmp,aes(x=(abs(disc))*100, y=acc*100)) +
geom_line(aes(linetype=approach), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
labs(x=x_title, y = y_title, linetype = "Data", color =legend_title)+
theme(
# plot.title = element_text(size = 25),
axis.text = element_text(size = 30),
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
} else {
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
}
tmp <- subset(data,data$depth ==3 & data$source == 'out-of-sample') #in-sample out-of-sample
x_title = "Statistical Parity (%)"
y_title= "Accuracy (%)"
legend_title = 'SP Bound'
g1 <- ggplot(tmp,aes(x=(abs(disc))*100, y=acc*100)) +
geom_line(aes(linetype=approach), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
labs(x=x_title, y = y_title, linetype = "Data", color =legend_title)+
theme(
# plot.title = element_text(size = 25),
axis.text = element_text(size = 30),
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
} else {
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
}
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/FlowOCT Kamiran_version Nov 22/compas_kamiran.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
# data = data[data$sample %in% c(2) ,]
# data = data[data$fair.bound!=1,]
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
# data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = 'SP'
data = rbind(data,tmp_none)
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
# data$data <- 'adult'
tmp <- data[,c("approach",'sample',"depth","fair.bound","train.acc",'test.acc',
"sp.train.pred","sp.test.pred")]
tmp <- tmp %>%
group_by(approach,depth, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc), mean(sp.train.pred),
mean(sp.test.pred))
names(tmp) <- c("approach","depth","fair.bound","train.acc",'test.acc',
"train.disc","test.disc")
tmp$fair.bound <- as.numeric(as.character(tmp$fair.bound))
tmp1 <- tmp[,c("approach","depth","fair.bound","test.acc","test.disc")]
tmp1$source <- 'out-of-sample'
names(tmp1) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp2 <- tmp[,c("approach","depth","fair.bound","train.acc","train.disc")]
tmp2$source <- 'in-sample'
names(tmp2) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp <- rbind(tmp1,tmp2)
rm(tmp1,tmp2)
data_flow <- tmp
data_flow$data <- NULL
rm(tmp,data)
data= read.csv('./../Results/Kamiran/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data$depth <- data$depth + 1
data <- data %>%
group_by(depth, fair.bound) %>%
summarise(mean(acc_tr_pre),mean(disc_tr_pre),mean(acc_te_pre), mean(disc_te_pre),
mean(train.acc),mean(sp.train.pred),mean(test.acc),mean(sp.test.pred))
names(data) <- c("depth","fair.bound",'acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre','train.acc','sp.train.pred','test.acc','sp.test.pred')
data$approach <- 'Kamiran_relab'
data_relab <- data[,c('approach','depth','fair.bound','train.acc','sp.train.pred','test.acc','sp.test.pred')]
# data_relab$approach <- 'Kamiran_relab'
data_relab_train <- data_relab[,c('approach','depth','fair.bound','train.acc','sp.train.pred')]
data_relab_train$source <- 'in-sample'
names(data_relab_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab_test <- data_relab[,c('approach','depth','fair.bound','test.acc','sp.test.pred')]
data_relab_test$source <- 'out-of-sample'
names(data_relab_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab <- rbind(data_relab_train, data_relab_test)
rm(data_relab_test, data_relab_train)
data_pre <- data[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre')]
data_pre_train <- data_pre[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre')]
data_pre_train$source <- 'in-sample'
names(data_pre_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre_test <- data_pre[,c('approach','depth','fair.bound','acc_te_pre','disc_te_pre')]
data_pre_test$source <- 'out-of-sample'
names(data_pre_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre <- rbind(data_pre_train, data_pre_test)
rm(data_pre_test, data_pre_train, data)
data_pre$fair.bound <- 1
data_pre <- unique(data_pre)
data_kamiran <- rbind(data_pre, data_relab)
rm(data_pre, data_relab)
data_kamiran$acc <- data_kamiran$acc/100
data <- rbind(data_flow, data_kamiran)
data <- subset(data, data$fair.bound %in% data_kamiran$fair.bound)
View(data_kamiran)
View(data_flow)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/FlowOCT Kamiran_version Nov 22/adult_kamiran_2700.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
# data = data[data$sample %in% c(2) ,]
# data = data[data$fair.bound!=1,]
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
# data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = 'SP'
data = rbind(data,tmp_none)
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
# data$data <- 'adult'
tmp <- data[,c("approach",'sample',"depth","fair.bound","train.acc",'test.acc',
"sp.train.pred","sp.test.pred")]
tmp <- tmp %>%
group_by(approach,depth, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc), mean(sp.train.pred),
mean(sp.test.pred))
names(tmp) <- c("approach","depth","fair.bound","train.acc",'test.acc',
"train.disc","test.disc")
tmp$fair.bound <- as.numeric(as.character(tmp$fair.bound))
tmp1 <- tmp[,c("approach","depth","fair.bound","test.acc","test.disc")]
tmp1$source <- 'out-of-sample'
names(tmp1) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp2 <- tmp[,c("approach","depth","fair.bound","train.acc","train.disc")]
tmp2$source <- 'in-sample'
names(tmp2) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp <- rbind(tmp1,tmp2)
rm(tmp1,tmp2)
data_flow <- tmp
data_flow$data <- NULL
rm(tmp,data)
data= read.csv('./../Results/Kamiran/adult.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data$depth <- data$depth + 1
data <- data %>%
group_by(depth, fair.bound) %>%
summarise(mean(acc_tr_pre),mean(disc_tr_pre),mean(acc_te_pre), mean(disc_te_pre),
mean(train.acc),mean(sp.train.pred),mean(test.acc),mean(sp.test.pred))
names(data) <- c("depth","fair.bound",'acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre','train.acc','sp.train.pred','test.acc','sp.test.pred')
data$approach <- 'Kamiran_relab'
data_relab <- data[,c('approach','depth','fair.bound','train.acc','sp.train.pred','test.acc','sp.test.pred')]
# data_relab$approach <- 'Kamiran_relab'
data_relab_train <- data_relab[,c('approach','depth','fair.bound','train.acc','sp.train.pred')]
data_relab_train$source <- 'in-sample'
names(data_relab_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab_test <- data_relab[,c('approach','depth','fair.bound','test.acc','sp.test.pred')]
data_relab_test$source <- 'out-of-sample'
names(data_relab_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab <- rbind(data_relab_train, data_relab_test)
rm(data_relab_test, data_relab_train)
data_pre <- data[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre')]
data_pre_train <- data_pre[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre')]
data_pre_train$source <- 'in-sample'
names(data_pre_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre_test <- data_pre[,c('approach','depth','fair.bound','acc_te_pre','disc_te_pre')]
data_pre_test$source <- 'out-of-sample'
names(data_pre_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre <- rbind(data_pre_train, data_pre_test)
rm(data_pre_test, data_pre_train, data)
data_pre$fair.bound <- 1
data_pre <- unique(data_pre)
data_kamiran <- rbind(data_pre, data_relab)
rm(data_pre, data_relab)
data_kamiran$acc <- data_kamiran$acc/100
data <- rbind(data_flow, data_kamiran)
data <- subset(data, data$fair.bound %in% data_kamiran$fair.bound)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/FlowOCT Kamiran_version Nov 22/adult_kamiran_2700.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
# data = data[data$sample %in% c(2) ,]
# data = data[data$fair.bound!=1,]
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
# data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = 'SP'
data = rbind(data,tmp_none)
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
# data$data <- 'adult'
tmp <- data[,c("approach",'sample',"depth","fair.bound","train.acc",'test.acc',
"sp.train.pred","sp.test.pred")]
tmp <- tmp %>%
group_by(approach,depth, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc), mean(sp.train.pred),
mean(sp.test.pred))
names(tmp) <- c("approach","depth","fair.bound","train.acc",'test.acc',
"train.disc","test.disc")
tmp$fair.bound <- as.numeric(as.character(tmp$fair.bound))
tmp1 <- tmp[,c("approach","depth","fair.bound","test.acc","test.disc")]
tmp1$source <- 'out-of-sample'
names(tmp1) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp2 <- tmp[,c("approach","depth","fair.bound","train.acc","train.disc")]
tmp2$source <- 'in-sample'
names(tmp2) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp <- rbind(tmp1,tmp2)
rm(tmp1,tmp2)
data_flow <- tmp
data_flow$data <- NULL
rm(tmp,data)
data= read.csv('./../Results/Kamiran/adult.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data$depth <- data$depth + 1
data <- data %>%
group_by(depth, fair.bound) %>%
summarise(mean(acc_tr_pre),mean(disc_tr_pre),mean(acc_te_pre), mean(disc_te_pre),
mean(train.acc),mean(sp.train.pred),mean(test.acc),mean(sp.test.pred))
names(data) <- c("depth","fair.bound",'acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre','train.acc','sp.train.pred','test.acc','sp.test.pred')
data$approach <- 'Kamiran_relab'
data_relab <- data[,c('approach','depth','fair.bound','train.acc','sp.train.pred','test.acc','sp.test.pred')]
# data_relab$approach <- 'Kamiran_relab'
data_relab_train <- data_relab[,c('approach','depth','fair.bound','train.acc','sp.train.pred')]
data_relab_train$source <- 'in-sample'
names(data_relab_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab_test <- data_relab[,c('approach','depth','fair.bound','test.acc','sp.test.pred')]
data_relab_test$source <- 'out-of-sample'
names(data_relab_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab <- rbind(data_relab_train, data_relab_test)
rm(data_relab_test, data_relab_train)
data_pre <- data[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre')]
data_pre_train <- data_pre[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre')]
data_pre_train$source <- 'in-sample'
names(data_pre_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre_test <- data_pre[,c('approach','depth','fair.bound','acc_te_pre','disc_te_pre')]
data_pre_test$source <- 'out-of-sample'
names(data_pre_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre <- rbind(data_pre_train, data_pre_test)
rm(data_pre_test, data_pre_train, data)
data_pre$fair.bound <- 1
data_pre <- unique(data_pre)
data_kamiran <- rbind(data_pre, data_relab)
rm(data_pre, data_relab)
data_kamiran$acc <- data_kamiran$acc/100
data <- rbind(data_flow, data_kamiran)
data <- subset(data, data$fair.bound %in% data_kamiran$fair.bound)
tmp <- subset(data,data$depth ==2 & data$source == 'in-sample') #in-sample out-of-sample
x_title = "Statistical Parity (%)"
y_title= "Accuracy (%)"
legend_title = 'SP Bound'
g1 <- ggplot(tmp,aes(x=((disc))*100, y=acc*100)) +
geom_line(aes(linetype=approach), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
labs(x=x_title, y = y_title, linetype = "Data", color =legend_title)+
theme(
# plot.title = element_text(size = 25),
axis.text = element_text(size = 30),
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
} else {
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
}
data= read.csv('./../Results/Kamiran/adult-cart.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data$depth <- data$depth + 1
data <- data %>%
group_by(depth, fair.bound) %>%
summarise(mean(acc_tr_pre),mean(disc_tr_pre),mean(acc_te_pre), mean(disc_te_pre),
mean(train.acc),mean(sp.train.pred),mean(test.acc),mean(sp.test.pred))
names(data) <- c("depth","fair.bound",'acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre','train.acc','sp.train.pred','test.acc','sp.test.pred')
data$approach <- 'Kamiran_relab'
data_relab <- data[,c('approach','depth','fair.bound','train.acc','sp.train.pred','test.acc','sp.test.pred')]
# data_relab$approach <- 'Kamiran_relab'
data_relab_train <- data_relab[,c('approach','depth','fair.bound','train.acc','sp.train.pred')]
data_relab_train$source <- 'in-sample'
names(data_relab_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab_test <- data_relab[,c('approach','depth','fair.bound','test.acc','sp.test.pred')]
data_relab_test$source <- 'out-of-sample'
names(data_relab_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_relab <- rbind(data_relab_train, data_relab_test)
rm(data_relab_test, data_relab_train)
data_pre <- data[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre','acc_te_pre','disc_te_pre')]
data_pre_train <- data_pre[,c('approach','depth','fair.bound','acc_tr_pre','disc_tr_pre')]
data_pre_train$source <- 'in-sample'
names(data_pre_train) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre_test <- data_pre[,c('approach','depth','fair.bound','acc_te_pre','disc_te_pre')]
data_pre_test$source <- 'out-of-sample'
names(data_pre_test) <- c('approach','depth','fair.bound','acc','disc','source')
data_pre <- rbind(data_pre_train, data_pre_test)
rm(data_pre_test, data_pre_train, data)
data_pre$fair.bound <- 1
data_pre <- unique(data_pre)
data_kamiran <- rbind(data_pre, data_relab)
rm(data_pre, data_relab)
data_kamiran$acc <- data_kamiran$acc/100
data <- rbind(data_flow, data_kamiran)
data <- subset(data, data$fair.bound %in% data_kamiran$fair.bound)
tmp <- subset(data,data$depth ==2 & data$source == 'in-sample') #in-sample out-of-sample
x_title = "Statistical Parity (%)"
y_title= "Accuracy (%)"
legend_title = 'SP Bound'
g1 <- ggplot(tmp,aes(x=((disc))*100, y=acc*100)) +
geom_line(aes(linetype=approach), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
labs(x=x_title, y = y_title, linetype = "Data", color =legend_title)+
theme(
# plot.title = element_text(size = 25),
axis.text = element_text(size = 30),
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
} else {
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
}
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/FlowOCT Kamiran_version Nov 22/german_kamiran.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
# data = data[data$sample %in% c(2) ,]
# data = data[data$fair.bound!=1,]
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
# data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = 'SP'
data = rbind(data,tmp_none)
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
# data$data <- 'adult'
tmp <- data[,c("approach",'sample',"depth","fair.bound","train.acc",'test.acc',
"sp.train.pred","sp.test.pred")]
tmp <- tmp %>%
group_by(approach,depth, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc), mean(sp.train.pred),
mean(sp.test.pred))
names(tmp) <- c("approach","depth","fair.bound","train.acc",'test.acc',
"train.disc","test.disc")
tmp$fair.bound <- as.numeric(as.character(tmp$fair.bound))
tmp1 <- tmp[,c("approach","depth","fair.bound","test.acc","test.disc")]
tmp1$source <- 'out-of-sample'
names(tmp1) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp2 <- tmp[,c("approach","depth","fair.bound","train.acc","train.disc")]
tmp2$source <- 'in-sample'
names(tmp2) <- c("approach","depth","fair.bound","acc","disc",'source')
tmp <- rbind(tmp1,tmp2)
rm(tmp1,tmp2)
data_flow <- tmp
data_flow$data <- NULL
rm(tmp,data)
View(data_flow)
View(data_flow)
View(data_flow)
rm(list=ls())
graphics.off()
'
The analyzer can analyze some data collected by a bank giving a loan.
The dataset consists of 1000 datapoints of categorical and numerical
dataas well as a good credit vs bad credit metric which has been assigned by bank employees.
'
Kamiran_version = TRUE
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/german/')
data<- read.csv("../german/german.data", header = FALSE, sep = " ",na.strings = "",stringsAsFactors = TRUE)
names(data) <- c("chek_acc","month_duration","credit_history","purpose","Credit_amo","saving_amo","present_employmment",
"instalrate","p_status","guatan","present_resident","property","age","installment","Housing",
"existing_cards","job","no_people","telephn","foreign_worker","target")
summary(data$target)
summary(as.factor(data$target))
summary(as.factor(data$target))/nrow(data)*100
