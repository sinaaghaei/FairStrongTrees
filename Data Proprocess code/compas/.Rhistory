library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/Oct 20/Kamiran_compas_depth2_oct_20.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
# data = data[data$sample %in% c(2) ,]
# data = data[data$fair.bound!=1,]
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
for(i in c('SP')){#'SP','CSP','PE','EOpp','EOdds'
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = i
data = rbind(data,tmp_none)
}
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
data$data <- 'compas.csv'
tmp <- data
tmp <- tmp %>%
group_by(approach,data,depth, fair.type, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc),mean(sp.train.data), mean(sp.train.pred),
mean(sp.test.data),mean(sp.test.pred),
mean(csp.train.data), mean(csp.train.pred),
mean(csp.test.data),mean(csp.test.pred),
mean(pe.train.pred),
mean(pe.test.pred),
mean(EOpp.train.pred),
mean(EOpp.test.pred),
mean(EOdds.train.pred),
mean(EOdds.test.pred))
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","train.acc",'test.acc',
"train.data.sp","train.pred.sp","test.data.sp","test.pred.sp",
"train.data.csp","train.pred.csp","test.data.csp","test.pred.csp",
"train.pred.pe","test.pred.pe",
"train.pred.EOpp","test.pred.EOpp",
"train.pred.EOdds","test.pred.EOdds")
metric = 'SP'
if(metric == 'SP'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.sp','train.pred.sp')]
}else if(metric == 'CSP'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.csp','train.pred.csp')]
}else if(metric == 'PE'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.pe','train.pred.pe')]
}else if(metric == 'EOpp'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.EOpp','train.pred.EOpp')]
}else if(metric == 'EOdds'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.EOdds','train.pred.EOdds')]
}
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","test.acc","train.acc","test.pred.disc","train.pred.disc")
View(tmp)
tmp$fair.bound <- as.numeric(as.character(tmp$fair.bound))
tmp1 <- tmp[,c("approach","data","depth","fair.type","fair.bound","test.acc","test.pred.disc")]
tmp1$source <- 'out-of-sample'
names(tmp1) <- c("approach","data","depth","fair.type","fair.bound","acc","disc",'source')
tmp2 <- tmp[,c("approach","data","depth","fair.type","fair.bound","train.acc","train.pred.disc")]
tmp2$source <- 'in-sample'
names(tmp2) <- c("approach","data","depth","fair.type","fair.bound","acc","disc",'source')
tmp <- rbind(tmp1,tmp2)
rm(tmp1,tmp2)
View(tmp)
View(tmp)
g1 <- ggplot(data = subset(tmp,tmp$depth ==2),aes(x=(disc)*100, y=acc*100)) +
geom_line(aes(linetype=source), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
labs(x="Statistical Parity (%)", y = "Accuracy (%)", linetype = "Data", color = 'SP Bound')+
theme(
# plot.title = element_text(size = 25),
axis.text = element_text(size = 30),
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
} else {
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
}
View(tmp)
View(tmp)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/Oct 20/Kamiran_german_depth2_oct_20.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
# data = data[data$sample %in% c(2) ,]
# data = data[data$fair.bound!=1,]
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
data= read.csv('./../Results/Oct 20/Kamiran_german_depth2_oct_20.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
View(data)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/Oct 20/Kamiran_german_depth2_oct_20.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
# data = data[data$sample %in% c(2) ,]
# data = data[data$fair.bound!=1,]
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
for(i in c('SP')){#'SP','CSP','PE','EOpp','EOdds'
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = i
data = rbind(data,tmp_none)
}
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
data$data <- 'german.csv'
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE )
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/Oct 20/Kamiran_german_depth2_oct_20.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
# data = data[data$sample %in% c(2) ,]
# data = data[data$fair.bound!=1,]
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
for(i in c('SP')){#'SP','CSP','PE','EOpp','EOdds'
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = i
data = rbind(data,tmp_none)
}
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
data$data <- 'german.csv'
tmp <- data
tmp <- tmp %>%
group_by(approach,data,depth, fair.type, fair.bound) %>%
summarise(mean(train.acc),mean(test.acc),mean(sp.train.data), mean(sp.train.pred),
mean(sp.test.data),mean(sp.test.pred),
mean(csp.train.data), mean(csp.train.pred),
mean(csp.test.data),mean(csp.test.pred),
mean(pe.train.pred),
mean(pe.test.pred),
mean(EOpp.train.pred),
mean(EOpp.test.pred),
mean(EOdds.train.pred),
mean(EOdds.test.pred))
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","train.acc",'test.acc',
"train.data.sp","train.pred.sp","test.data.sp","test.pred.sp",
"train.data.csp","train.pred.csp","test.data.csp","test.pred.csp",
"train.pred.pe","test.pred.pe",
"train.pred.EOpp","test.pred.EOpp",
"train.pred.EOdds","test.pred.EOdds")
metric = 'SP'
if(metric == 'SP'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.sp','train.pred.sp')]
}else if(metric == 'CSP'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.csp','train.pred.csp')]
}else if(metric == 'PE'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.pe','train.pred.pe')]
}else if(metric == 'EOpp'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.EOpp','train.pred.EOpp')]
}else if(metric == 'EOdds'){
tmp <- subset(tmp, tmp$fair.type == metric)
tmp <- tmp[c("approach","data","depth","fair.type","fair.bound","test.acc",'train.acc',
'test.pred.EOdds','train.pred.EOdds')]
}
names(tmp) <- c("approach","data","depth","fair.type","fair.bound","test.acc","train.acc","test.pred.disc","train.pred.disc")
# tmp$fair.type <- factor(tmp$fair.type, levels = c('SP','CSP','PE','EOpp','EOdds'))
tmp$fair.bound <- as.numeric(as.character(tmp$fair.bound))
tmp1 <- tmp[,c("approach","data","depth","fair.type","fair.bound","test.acc","test.pred.disc")]
tmp1$source <- 'out-of-sample'
names(tmp1) <- c("approach","data","depth","fair.type","fair.bound","acc","disc",'source')
tmp2 <- tmp[,c("approach","data","depth","fair.type","fair.bound","train.acc","train.pred.disc")]
tmp2$source <- 'in-sample'
names(tmp2) <- c("approach","data","depth","fair.type","fair.bound","acc","disc",'source')
tmp <- rbind(tmp1,tmp2)
rm(tmp1,tmp2)
g1 <- ggplot(data = subset(tmp,tmp$depth ==2),aes(x=(disc)*100, y=acc*100)) +
geom_line(aes(linetype=source), size=3) +
geom_point(aes(color = fair.bound),size=10)+
scale_color_gradient(low="blue", high="red")+
labs(x="Statistical Parity (%)", y = "Accuracy (%)", linetype = "Data", color = 'SP Bound')+
theme(
# plot.title = element_text(size = 25),
axis.text = element_text(size = 30),
legend.position = "right", legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 30),
legend.title = element_text(size = 35),
text = element_text(family=fontfam),
axis.title = element_text(size = 40)
)
print(g1)
if (forpres)
{
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 16, height = 12, units =  "in")
} else {
ggsave(paste(figure_path,"fig.pdf",sep = ""),device = "pdf", width = 12, height = 8, units =  "in")
}
library(data.table)
library(Publish)
library(caret)
library(sigmoid)
library(rpart)
library(dplyr)
rm(list=ls())
graphics.off()
Kamiran_version = TRUE
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
# data_raw <- read.csv("compas-analysis-master/compas-scores-raw.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
# data_v <- read.csv("compas-analysis-master/compas-scores-two-years-violent.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
# data_compas <- read.csv("compas-analysis-master/compas-scores.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/compas/')
data <- read.csv("compas-analysis-master/compas-scores-two-years.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data <- dplyr::select(data, race, age_cat, sex,priors_count, c_charge_degree, c_jail_in, c_jail_out, days_b_screening_arrest,
decile_score, score_text, is_recid, two_year_recid) %>%
filter(days_b_screening_arrest <= 30) %>%
filter(days_b_screening_arrest >= -30) %>%
filter(is_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A')
data$length_of_stay <- as.numeric(as.Date(data$c_jail_out) - as.Date(data$c_jail_in))
data <- dplyr::select(data, race, age_cat, sex,priors_count, c_charge_degree,length_of_stay,
score_text, two_year_recid)
names(data)[names(data)=="two_year_recid"] = "target"
data$age_cat <- factor(data$age_cat, levels = c('Less than 25','25 - 45','Greater than 45'))
data$score_text <- factor(data$score_text, levels = c('Low','Medium','High'))
# we partition prior convictions into
#four bins: 0, 1–2, 3–4, and 5 or more.
# see: https://arxiv.org/pdf/1701.08230.pdf
data$priors_count = as.numeric(data$priors_count)
data$priors_count = cut(data$priors_count ,
c(-Inf,0,2,4,Inf),
labels=c(1,2,3,4))
#5 bins: 0, 1, 2–7, 8-15,and 16 or more.
data$length_of_stay = cut(data$length_of_stay ,
c(-Inf,0,1,7,15,Inf),
labels=c(1,2,3,4,5))
index <- !(data$race %in% c('African-American','Caucasian','Hispanic'))
data$race[index] <- 'Other'
for(f in names(data)){
data[[f]] = as.factor(data[[f]])
data[[f]] = droplevels(data[[f]])
}
data$race <- as.character(data$race)
if(Kamiran_version){
index <- data$race == 'Caucasian'
data$race[index] = 'white'
data$race[!index] = 'non-white'
}
data$race <- as.factor(data$race)
table(data$target)
View(data)
View(data)
table(data$target)/nrow(data)*100
table(data$target)/nrow(data)*100
table(data$target,data$race)/nrow(data)*100
library(kableExtra)
library(png)
library(ggplot2)
library(reshape2)
library(egg)
require(tidyr)
require(dplyr)
library(dplyr)
library(latex2exp)
# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/Oct 20/Kamiran_compas_depth2_oct_20.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
View(data)
View(subset(data, data$fair.type == 'None'))
view(subset(data, data$fair.type == 'None'))
tmp = subset(data, data$fair.type == 'None')
rm(list=ls())
data_train<- read.csv("/Users/sina/Documents/GitHub/FairStrongTrees/DataSets/KamiranVersion/compas_train_calibration_1.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
summary(data)
summary(data_train)
library(data.table)
library(Publish)
library(caret)
library(sigmoid)
library(rpart)
library(dplyr)
rm(list=ls())
graphics.off()
Kamiran_version = TRUE
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/compas/')
data <- read.csv("compas-analysis-master/compas-scores-two-years.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
#We remove decile_score, score_text from the features
data <- dplyr::select(data, race, age_cat, sex,priors_count, c_charge_degree, c_jail_in, c_jail_out, days_b_screening_arrest,
is_recid, two_year_recid) %>%
filter(days_b_screening_arrest <= 30) %>%
filter(days_b_screening_arrest >= -30) %>%
filter(is_recid != -1) %>%
filter(c_charge_degree != "O")
#  %>% filter(score_text != 'N/A')
data$length_of_stay <- as.numeric(as.Date(data$c_jail_out) - as.Date(data$c_jail_in))
data <- dplyr::select(data, race, age_cat, sex,priors_count, c_charge_degree,length_of_stay,
two_year_recid)
names(data)[names(data)=="two_year_recid"] = "target"
data$age_cat <- factor(data$age_cat, levels = c('Less than 25','25 - 45','Greater than 45'))
# data$score_text <- factor(data$score_text, levels = c('Low','Medium','High'))
# we partition prior convictions into
#four bins: 0, 1–2, 3–4, and 5 or more.
# see: https://arxiv.org/pdf/1701.08230.pdf
data$priors_count = as.numeric(data$priors_count)
data$priors_count = cut(data$priors_count ,
c(-Inf,0,2,4,Inf),
labels=c(1,2,3,4))
#5 bins: 0, 1, 2–7, 8-15,and 16 or more.
data$length_of_stay = cut(data$length_of_stay ,
c(-Inf,0,1,7,15,Inf),
labels=c(1,2,3,4,5))
index <- !(data$race %in% c('African-American','Caucasian','Hispanic'))
data$race[index] <- 'Other'
for(f in names(data)){
data[[f]] = as.factor(data[[f]])
data[[f]] = droplevels(data[[f]])
}
data$race <- as.character(data$race)
if(Kamiran_version){
index <- data$race == 'Caucasian'
data$race[index] = 'white'
data$race[!index] = 'non-white'
}
data$race <- as.factor(data$race)
##########################################################################################################
# encoding data
##########################################################################################################
data <- dataencoder(data)
View(data)
summary(data)
data_enc = data
#Now we tuurn all categorical  features into one-hot vectors
dmy <- dummyVars(" ~ .-target", data = data_enc)
data_enc <- data.frame(predict(dmy, newdata = data_enc))
View(data)
View(data_enc)
#if a feature has only two levels we should only keep one column
#As our convention, we always keep the first one
cols = c()
View(data_enc)
tmp <- gsub("\\..*","",names( data_enc ))
tmp
tmp
tmp=="race"
sum(tmp=="race")
sum(tmp=="age_cat")
min(which((tmp=='race')==TRUE))
#if a feature has only two levels we should only keep one column
#As our convention, we always keep the first one
cols = c()
tmp <- gsub("\\..*","",names( data_enc ))
for(name in names(data)){
# a = grepl( name , tmp ,fixed=TRUE)
a = tmp == name
if(sum(a)==2){
cols <- append(cols, min(which(a == TRUE)))
}else{
cols <- append(cols, which(a == TRUE))
}
}
data_enc <- data_enc[,cols]
data_enc$target <- data$target
View(data_enc)
View(data_enc)
View(data_enc)
names(data_enc)
v = "age_cat"
seq(2,nlevels(data[[v]]),1)
View(data_enc)
i=2
paste(v,toString(i),sep = ".")
View(data_enc)
View(data_enc)
a =  as.numeric(as.character(data_enc[[paste(v,toString(i),sep = ".")]]))
a
View(data_enc)
paste(v,toString(i-1),sep = ".")
b =  as.numeric(as.character(data_enc[[paste(v,toString(i-1),sep = ".")]]))
View(data_enc)
View(data_enc)
seq(2,nlevels(data[[v]]),1)
v = 'length_of_stay'
seq(2,nlevels(data[[v]]),1)
