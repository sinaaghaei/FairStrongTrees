# library(ggpubr)
library(data.table)
library(RColorBrewer)
library(MASS)
require(scales)
rm(list=ls())
# data1= read.csv('./../DataSets/compas.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
data= read.csv('./../Results/ٔNov_3/compas_kamiran.csv', header=TRUE, sep=',', na.strings="", stringsAsFactors =TRUE)
# data = data[data$sample %in% c(2) ,]
# data = data[data$fair.bound!=1,]
forpres=TRUE
if (forpres){
fontfam = "sans"
} else {
fontfam = "serif"
}
figure_path = "./"
data$sample <- as.factor(data$sample)
data$depth <- as.factor(data$depth)
data$fair.type <- as.factor(data$fair.type)
data$fair.bound <- as.factor(data$fair.bound)
for(i in c('SP')){#'SP','CSP','PE','EOpp','EOdds'
tmp_none <- data[data$fair.type == 'None',]
tmp_none$fair.type = i
data = rbind(data,tmp_none)
}
data <- data[data$fair.type!= 'None',]
data$fair.type <- droplevels(data$fair.type)
rm(tmp_none)
data$data <- 'german'
View(data)
library(data.table)
library(Publish)
library(caret)
library(sigmoid)
library(rpart)
library(dplyr)
rm(list=ls())
graphics.off()
Kamiran_version = TRUE
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
# data_raw <- read.csv("compas-analysis-master/compas-scores-raw.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
# data_v <- read.csv("compas-analysis-master/compas-scores-two-years-violent.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
# data_compas <- read.csv("compas-analysis-master/compas-scores.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/compas/')
data <- read.csv("compas-analysis-master/compas-scores-two-years.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data <- dplyr::select(data, race, age_cat, sex,priors_count, c_charge_degree, c_jail_in, c_jail_out, days_b_screening_arrest,
decile_score, score_text, is_recid, two_year_recid) %>%
filter(days_b_screening_arrest <= 30) %>%
filter(days_b_screening_arrest >= -30) %>%
filter(is_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A')
data$length_of_stay <- as.numeric(as.Date(data$c_jail_out) - as.Date(data$c_jail_in))
View(data)
data <- dplyr::select(data, race, age_cat, sex,priors_count, c_charge_degree,length_of_stay,
score_text, two_year_recid)
names(data)[names(data)=="two_year_recid"] = "target"
data$age_cat <- factor(data$age_cat, levels = c('Less than 25','25 - 45','Greater than 45'))
data$score_text <- factor(data$score_text, levels = c('Low','Medium','High'))
# we partition prior convictions into
#four bins: 0, 1–2, 3–4, and 5 or more.
# see: https://arxiv.org/pdf/1701.08230.pdf
data$priors_count = as.numeric(data$priors_count)
summary(data$priors_count)
data$ID <- NULL
# This is the target column we are interested for classification
names(data)[names(data)=='default.payment.next.month'] = 'target'
#we can see that the repayment status is indicated in columns PAY_0, PAY_2 ... with no PAY_1 column,
#so we rename PAY_0 to PAY_1 for ease of understanding.
names(data)[names(data)=='PAY_0'] = 'PAY_1'
names(data)
rm(list=ls())
graphics.off()
Kamiran_version = TRUE
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/default /')
data<- read.csv("default of credit card clients.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
View(data)
View(data)
data$ID <- NULL
# This is the target column we are interested for classification
names(data)[names(data)=='default.payment.next.month'] = 'target'
#we can see that the repayment status is indicated in columns PAY_0, PAY_2 ... with no PAY_1 column,
#so we rename PAY_0 to PAY_1 for ease of understanding.
names(data)[names(data)=='PAY_0'] = 'PAY_1'
View(data)
names(data)
data <- dplyr::select(data, LIMIT_BAL, SEX, EDUCATION,MARRIAGE, AGE, PAY_1, PAY_2, PAY_3,PAY_4,PAY_5,
PAY_6, target)
names(data)
summary(data$LIMIT_BAL)
hist(data$LIMIT_BAL)
hist(data$AGE)
hist(data$SEX)
hist(data$EDUCATION)
hist(data$MARRIAGE)
summary(data$AGE)
hist(data$AGE)
# Categorize Age into 4 groups
data<- data %>% mutate(age_group = ifelse(AGE <=30, "<=30",
ifelse(AGE>30 & AGE <=45, "30-45",
ifelse(AGE>45 & AGE <=60,"45-60",
">60"))))
data$age_group <- factor(data$age_group, levels = c('<=30','30-45','45-60','>60'))
# Check levels result of Age after processing
levels(data$age_group)
View(data)
data$AGE <- NULL
names(data)
summary(data$LIMIT_BAL)
hist(data$LIMIT_BAL)
# LIMIT_BAL
x='LIMIT_BAL'
data[[x]] = as.numeric(data[[x]])
data[[x]] = cut(data[[x]],
c(-Inf,quantile(data[[x]],0.25),quantile(data[[x]],0.5),quantile(data[[x]],0.75),Inf),
labels=c(1,2,3,4))
View(data)
for(f in names(data)){
data[[f]] = as.factor(data[[f]])
}
summary(data)
summary(data$PAY_1)
View(data)
##########################################################################################################
# One hot encoded data
##########################################################################################################
data<- dataencoder(data)
data_enc = data
#Now we tuurn all categorical  features into one-hot vectors
dmy <- dummyVars(" ~ .-target", data = data_enc)
data_enc <- data.frame(predict(dmy, newdata = data_enc))
View(data_enc)
summary(data$SEX)
library(caret)
library(stringr)
library(outliers)
library(editrules)
library(dplyr)
rm(list=ls())
graphics.off()
Kamiran_version = TRUE
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/default /')
data<- read.csv("default of credit card clients.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
summary(data$SEX)
summary(as.factor(data$SEX))
data$ID <- NULL
# This is the target column we are interested for classification
names(data)[names(data)=='default.payment.next.month'] = 'target'
#we can see that the repayment status is indicated in columns PAY_0, PAY_2 ... with no PAY_1 column,
#so we rename PAY_0 to PAY_1 for ease of understanding.
names(data)[names(data)=='PAY_0'] = 'PAY_1'
#we get rid of pay_amt and bill_amt columns as there is high correlation between these cols and the rest of the cols
data <- dplyr::select(data, LIMIT_BAL, SEX, EDUCATION, MARRIAGE, AGE, PAY_1, PAY_2, PAY_3,PAY_4,PAY_5,
PAY_6, target)
# Categorize Age into 4 groups : <=30, 30-45, 45-60 and >60
# Convert Age character into numeric because Age has character type as default in dataset.
data$age <- as.integer(data$age)
library(caret)
library(stringr)
library(outliers)
library(editrules)
library(dplyr)
rm(list=ls())
graphics.off()
Kamiran_version = TRUE
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/default /')
data<- read.csv("default of credit card clients.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
##########################################################################################################
# tidy preprocess
##########################################################################################################
data$ID <- NULL
# This is the target column we are interested for classification
names(data)[names(data)=='default.payment.next.month'] = 'target'
#we can see that the repayment status is indicated in columns PAY_0, PAY_2 ... with no PAY_1 column,
#so we rename PAY_0 to PAY_1 for ease of understanding.
names(data)[names(data)=='PAY_0'] = 'PAY_1'
#we get rid of pay_amt and bill_amt columns as there is high correlation between these cols and the rest of the cols
data <- dplyr::select(data, LIMIT_BAL, SEX, EDUCATION, MARRIAGE, AGE, PAY_1, PAY_2, PAY_3,PAY_4,PAY_5,
PAY_6, target)
# Categorize Age into 4 groups : <=30, 30-45, 45-60 and >60
data<- data %>% mutate(age_group = ifelse(AGE <=30, "<=30",
ifelse(AGE>30 & AGE <=45, "30-45",
ifelse(AGE>45 & AGE <=60,"45-60",
">60"))))
data$age_group <- factor(data$age_group, levels = c('<=30','30-45','45-60','>60'))
data$AGE <- NULL
# LIMIT_BAL
x='LIMIT_BAL'
data[[x]] = as.numeric(data[[x]])
data[[x]] = cut(data[[x]],
c(-Inf,quantile(data[[x]],0.25),quantile(data[[x]],0.5),quantile(data[[x]],0.75),Inf),
labels=c(1,2,3,4))
for(f in names(data)){
data[[f]] = as.factor(data[[f]])
}
summary(data$SEX)
##########################################################################################################
# One hot encoded data
##########################################################################################################
data<- dataencoder(data)
data_enc = data
#Now we tuurn all categorical  features into one-hot vectors
dmy <- dummyVars(" ~ .-target", data = data_enc)
data_enc <- data.frame(predict(dmy, newdata = data_enc))
#if a feature has only two levels we should only keep one column
#As our convention, we always keep the first one
cols = c()
tmp <- gsub("\\..*","",names( data_enc ))
for(name in names(data)){
# a = grepl( name , tmp ,fixed=TRUE)
a = tmp == name
if(sum(a)==2){
cols <- append(cols, min(which(a == TRUE)))
}else{
cols <- append(cols, which(a == TRUE))
}
}
data_enc <- data_enc[,cols]
data_enc$target <- data$target
names(data)
summary(data$PAY_1)
summary(data)
summary(data_enc$SEX.1)
summary(as.factor(data_enc$SEX.1))
summary(as.factor(data$SEX))
summary(as.factor(data$target))
library(caret)
library(stringr)
library(outliers)
library(editrules)
library(dplyr)
rm(list=ls())
graphics.off()
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/default /')
data<- read.csv("default of credit card clients.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
summary(as.factor(data$PAY_0))
View(data)
summary(as.factor(data$PAY_1))
summary(as.factor(data$PAY_2))
summary(as.factor(data$PAY_3))
library(caret)
library(stringr)
library(outliers)
library(editrules)
library(dplyr)
rm(list=ls())
graphics.off()
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/default /')
data<- read.csv("default of credit card clients.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
data$ID <- NULL
# This is the target column we are interested for classification
names(data)[names(data)=='default.payment.next.month'] = 'target'
#we can see that the repayment status is indicated in columns PAY_0, PAY_2 ... with no PAY_1 column,
#so we rename PAY_0 to PAY_1 for ease of understanding.
names(data)[names(data)=='PAY_0'] = 'PAY_1'
#we get rid of pay_amt and bill_amt columns as there is high correlation between these cols and the rest of the cols
data <- dplyr::select(data, LIMIT_BAL, SEX, EDUCATION, MARRIAGE, AGE, PAY_1, PAY_2, PAY_3,PAY_4,PAY_5,
PAY_6, target)
# Categorize Age into 4 groups : <=30, 30-45, 45-60 and >60
data<- data %>% mutate(age_group = ifelse(AGE <=30, "<=30",
ifelse(AGE>30 & AGE <=45, "30-45",
ifelse(AGE>45 & AGE <=60,"45-60",
">60"))))
data$age_group <- factor(data$age_group, levels = c('<=30','30-45','45-60','>60'))
data$AGE <- NULL
# LIMIT_BAL
x='LIMIT_BAL'
data[[x]] = as.numeric(data[[x]])
data[[x]] = cut(data[[x]],
c(-Inf,quantile(data[[x]],0.25),quantile(data[[x]],0.5),quantile(data[[x]],0.75),Inf),
labels=c(1,2,3,4))
for(f in names(data)){
data[[f]] = as.factor(data[[f]])
}
##########################################################################################################
# One hot encoded data
##########################################################################################################
data<- dataencoder(data)
data_enc = data
#Now we tuurn all categorical  features into one-hot vectors
dmy <- dummyVars(" ~ .-target", data = data_enc)
data_enc <- data.frame(predict(dmy, newdata = data_enc))
#if a feature has only two levels we should only keep one column
#As our convention, we always keep the first one
cols = c()
tmp <- gsub("\\..*","",names( data_enc ))
for(name in names(data)){
# a = grepl( name , tmp ,fixed=TRUE)
a = tmp == name
if(sum(a)==2){
cols <- append(cols, min(which(a == TRUE)))
}else{
cols <- append(cols, which(a == TRUE))
}
}
data_enc <- data_enc[,cols]
data_enc$target <- data$target
View(data)
View(data_enc)
# Taking care of  the integer columns : If x_ij = 1 then x_i(j+1) should be one as well  for odd i's
features = c('LIMIT_BAL','age_group','PAY_1','PAY_2','PAY_3','PAY_4','PAY_5','PAY_6')
for(v in features){
for(i in seq(2,nlevels(data[[v]]),1)){
a =  as.numeric(as.character(data_enc[[paste(v,toString(i),sep = ".")]]))
b =  as.numeric(as.character(data_enc[[paste(v,toString(i-1),sep = ".")]]))
data_enc[[paste(v,toString(i),sep = ".")]] =  as.numeric(a|b)
}
}
rm(dmy)
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/DataSets/')
View(data_enc)
names(data_enc)
library(caret)
library(stringr)
library(outliers)
library(editrules)
library(dplyr)
rm(list=ls())
graphics.off()
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/default /')
data<- read.csv("default of credit card clients.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
##########################################################################################################
# tidy preprocess
##########################################################################################################
data$ID <- NULL
# This is the target column we are interested for classification
names(data)[names(data)=='default.payment.next.month'] = 'target'
#we can see that the repayment status is indicated in columns PAY_0, PAY_2 ... with no PAY_1 column,
#so we rename PAY_0 to PAY_1 for ease of understanding.
names(data)[names(data)=='PAY_0'] = 'PAY_1'
#we get rid of pay_amt and bill_amt columns as there is high correlation between these cols and the rest of the cols
data <- dplyr::select(data, LIMIT_BAL, SEX, EDUCATION, MARRIAGE, AGE, PAY_1, PAY_2, PAY_3,PAY_4,PAY_5,
PAY_6, target)
# Categorize Age into 4 groups : <=30, 30-45, 45-60 and >60
data<- data %>% mutate(age_group = ifelse(AGE <=30, "<=30",
ifelse(AGE>30 & AGE <=45, "30-45",
ifelse(AGE>45 & AGE <=60,"45-60",
">60"))))
data$age_group <- factor(data$age_group, levels = c('<=30','30-45','45-60','>60'))
data$AGE <- NULL
# LIMIT_BAL
x='LIMIT_BAL'
data[[x]] = as.numeric(data[[x]])
data[[x]] = cut(data[[x]],
c(-Inf,quantile(data[[x]],0.25),quantile(data[[x]],0.5),quantile(data[[x]],0.75),Inf),
labels=c(1,2,3,4))
for(f in names(data)){
data[[f]] = as.factor(data[[f]])
}
summary(data)
library(caret)
library(stringr)
library(outliers)
library(editrules)
library(dplyr)
rm(list=ls())
graphics.off()
#################################################################################################
#Functions
#################################################################################################
dataencoder <- function (data) {
#encoding data
must_convert<-sapply(data,is.factor)       # logical vector telling if a variable needs to be displayed as numeric
M2<-sapply(data[,must_convert],unclass)    # data.frame of all categorical variables now displayed as numeric
data_num<-cbind(data[,!must_convert],M2)
data_num <- as.data.frame(data_num)
for(tmp_f in names(data)){
data_num[[tmp_f]] = as.factor(data_num[[tmp_f]] )
data_num[[tmp_f]]  = droplevels(data_num[[tmp_f]] )
}
data_num
}
##########################################################################################################
# read data
##########################################################################################################
setwd('/Users/sina/Documents/GitHub/FairStrongTrees/Data Proprocess code/default /')
data<- read.csv("default of credit card clients.csv", header = TRUE, sep = ",",na.strings = "",stringsAsFactors = TRUE)
tmp <- subset(data, data$PAY_AMT1 == data$BILL_AMT1)
View(tmp)
summary(as.factor(tmp$PAY_0))
tmp <- subset(data, data$PAY_AMT2 == data$BILL_AMT2)
summary(as.factor(tmp$PAY_2))
tmp <- subset(data, data$PAY_AMT2 == data$BILL_AMT2)
summary(as.factor(tmp$PAY_2))
tmp <- subset(data, data$PAY_AMT1 == data$BILL_AMT1)
summary(as.factor(tmp$PAY_0))
